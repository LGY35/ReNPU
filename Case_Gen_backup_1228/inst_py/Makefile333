SRC_DIR = ../hybrid_assembler/out_extract
OUT_DIR = ./out
HEX_GEN_DIR = ./hex_gen

SRC := $(wildcard $(SRC_DIR)/case*_extract.txt)
OBJECTS := $(patsubst $(SRC_DIR)/%_extract.txt, $(OUT_DIR)/%.txt, $(SRC))

###### inst_remake规则 
$(OUT_DIR)/%.txt: $(SRC_DIR)/%_extract.txt
	mkdir -p $(OUT_DIR)
	python3 inst_remake22.py -i $< -o $@

SRC_DATA := ../../DVcase/case9_nestloop/case9_data.txt

# 提取case号，确保它能找到所有 _idma.txt 文件
CASES := $(sort $(patsubst $(OUT_DIR)/case%_idma.txt, %, $(wildcard $(OUT_DIR)/*_idma.txt)))

# 调试信息，查看 CASES 内容
$(info CASES = $(CASES))

# 目标文件
HEX_OBJS := $(foreach case,$(CASES),$(HEX_GEN_DIR)/case$(case)_merge_inst.txt $(HEX_GEN_DIR)/case$(case)_out_hex.txt)
$(info Generating HEX_OBJS $(HEX_OBJS))

############################# 构建命令 #############################

# 针对每个 case 生成单独的伪目标规则，以适应不同的 _noc 文件名，并生成两个输出文件dd
define make_hex_rule
$(info Generating rule for case $(1))

# 伪目标依赖于两个实际文件
case$(1)_hex_files: $(HEX_GEN_DIR)/case$(1)_merge_inst.txt $(HEX_GEN_DIR)/case$(1)_out_hex.txt

# 实际的生成命令，在伪目标中执行，确保两个文件一起生成
$(HEX_GEN_DIR)/case$(1)_merge_inst.txt $(HEX_GEN_DIR)/case$(1)_out_hex.txt: $(OUT_DIR)/case$(1)_idma.txt $(wildcard $(OUT_DIR)/case$(1)*_noc.txt) $(SRC_DATA)
	mkdir -p $(HEX_GEN_DIR)
	python3 hex_gen.py -i $(OUT_DIR)/case$(1)_idma.txt $(wildcard $(OUT_DIR)/case$(1)*_noc.txt) $(SRC_DATA) -o $(HEX_GEN_DIR)/case$(1)_merge_inst.txt $(HEX_GEN_DIR)/case$(1)_out_hex.txt
endef

# 对每个 case 调用 make_hex_rule
$(foreach case,$(CASES),$(eval $(call make_hex_rule,$(case))))

############################# PHONY目标 #############################
.PHONY: all inst_remake hex_gen clean $(foreach case,$(CASES),case$(case)_hex_files)

# 主目标
all: $(OBJECTS) $(foreach case,$(CASES),case$(case)_hex_files)

# 单独构建 inst_remake 和 hex_gen
inst_remake: $(OBJECTS)
hex_gen: $(foreach case,$(CASES),case$(case)_hex_files)

# 清理目标
clean:
	rm -rf $(HEX_GEN_DIR)
	rm -rf $(OUT_DIR)
